openapi: 3.0.0
info:
  title: ApothiCare.io API
  description: "The official ApothiCare API's documentation."
  version: 1.4.0
servers:
  - url: http://localhost:3000
    description: "Official local server."
paths:
  # Users paths (/users)
  /users/login:
    post:
      summary: Login in.
      operationId: login
      parameters:
        - $ref: "#/parameters/Content-Type"
      tags:
        - Users
        - Authentication
      description: "This route allow to log in the API.\n
      The connection is made from an email address and a password.\n
      This route allows the recovery of a **JsonWebToken**, main element allowing to be able to request on all roads being protected.\n
      Once the token is retrieved, you will be able to transmit it in the header or body of your requests.\n\n

      Caution: You need yo verify your email address before to be able to connect on the API."
      requestBody:
        description: "The body parameters must contains the **login** and **password** field."
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                login:
                  type: string
                  description: The email address of the user
                  example: nao.marvin@example.com
                password:
                  type: string
                  description: The password of the user.
                  example: "42_is_the_answer"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserLogin'
        '422':
          $ref: '#/components/responses/MissingParameter'
        '401':
          $ref: '#/components/responses/AuthenticationFail'
  /users/create:
    post:
      summary: Create an account.
      operationId: register
      parameters:
        - $ref: "#/parameters/Content-Type"
      tags:
        - Users
        - Authentication
      description: "This route allow to create an account in the API.\n
        The account creation is made from an email address, a nickname and a password.\n
        After the account is created, an email is send to the specified email to verify the authenticity of this one.\n\n

        Caution: You won't be able to log into the API if you don't follow these steps."
      requestBody:
        description: "The body parameters must contains the **login**, the **name** and **password** field."
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                login:
                  type: string
                  description: The email address of the user
                  example: nao.marvin@example.com
                password:
                  type: string
                  description: The password of the user.
                  example: "42_is_the_answer"
                name:
                  type: string
                  description: The name / nickname of the user.
                  example: "Nao Marvin"
      responses:
        '201':
          $ref: '#/components/responses/Success'
        '422':
          $ref: '#/components/responses/MissingParameter'
        '409':
          $ref: '#/components/responses/DuplicateEntry'
  /users/forgotten:
    post:
      summary: Password recovering.
      operationId: passwordRecovering
      parameters:
        - $ref: "#/parameters/Content-Type"
      tags:
        - Users
        - Authentication
      description: "This route allow to recover a forgotten password.\n
          The password recovering just need the login of the user.\n
          An email is send to the specified login to verify the authenticity of this one."
      requestBody:
        description: "The body parameters must contains the **login**, the **name** and **password** field."
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                login:
                  type: string
                  description: The email address of the user
                  example: nao.marvin@example.com
      responses:
        '201':
          $ref: '#/components/responses/Success'
        '422':
          $ref: '#/components/responses/MissingParameter'
        '404':
          $ref: '#/components/responses/NotFound'
  /users:
    get:
      summary: Get the information of every users
      operationId: getUsers
      parameters:
        - $ref: "#/parameters/Content-Type"
        - $ref: "#/parameters/x-access-token"
      tags:
        - Users
      description: "This route allow to retrieve every users' information.\n
      This route can be called only by the admin of ApothiCare."
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Success'
                  - type: array
                    items:
                      $ref: '#/components/schemas/User'
    put:
      summary: Get the information of every users
      operationId: updateUsers
      parameters:
        - $ref: "#/parameters/Content-Type"
        - $ref: "#/parameters/x-access-token"
      tags:
        - Users
      description: "This route allow to modify the users' information.\n
      This route can only be called by the logged user."
      requestBody:
        description: "The body parameters must contains the **id_user** and **hashPassword** field."
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The new user's name.
                  example: New Marvin
                login:
                  type: string
                  description: The new user's login.
                  example: new_nao.marvin@example.com
                password:
                  type: string
                  description: The new user's password.
                  example: new_passw0rd
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '422':
          $ref: '#/components/responses/MissingParameter'
    delete:
      summary: Get the information of every users
      operationId: deleteUsers
      parameters:
        - $ref: "#/parameters/Content-Type"
        - $ref: "#/parameters/x-access-token"
      tags:
        - Users
      description: "This route allow to remove the user from the database.\n
      This route can only be called by the logged user."
      responses:
        '204':
          description: The user's account has been deleted.
  /users/me:
    get:
      summary: Get the information of every users
      operationId: getMyInformation
      parameters:
        - $ref: "#/parameters/Content-Type"
        - $ref: "#/parameters/x-access-token"
      tags:
        - Users
      description: "This route allow to retrieve the logged users' information."
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Success'
                  - $ref: '#/components/schemas/User'
  /users/password:
    patch:
      summary: Change the loggged user's password
      operationId: updatePassword
      parameters:
        - $ref: "#/parameters/Content-Type"
      tags:
        - Users
      description: This route allow the logged user to modify his password
      requestBody:
        description: "The body parameters must contains the **password** field."
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  description: The new user's password.
                  example: new_passw0rd
                userId:
                  type: integer
                  description: The user's id.
                  example: 42
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '422':
          $ref: '#/components/responses/MissingParameter'
  /tasks:
    post:
      summary: Create a new task.
      operationId: addTasks
      parameters:
        - $ref: "#/parameters/Content-Type"
      tags:
        - Tasks
      description: "This route allow to create a new task."
      requestBody:
        description: "The body parameters must contains the **urgence**, the **importance**, the **title**, the **description** and the **deadline** field."
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                urgence:
                  type: integer
                  description: The urgence's priority
                  example: 4
                importance:
                  type: integer
                  description: The importance's priority
                  example: -1
                title:
                  type: string
                  description: The title of the task
                  example: Ma belle task
                description:
                  type: string
                  description: The description of the task
                  example: Ma belle description
                deadline:
                  type: date
                  description: The deadline of the task
      responses:
        '201':
          $ref: '#/components/responses/Success'
        '422':
          $ref: '#/components/responses/MissingParameter'
    /tasks/{id}:
      get:
        summary: Get task by its id.
      put:
        summary: Update a task by its id.
      delete:
        summary: Remove a task by its id.

# The components section contains schemas and routes' responses
components:
  # Routes responses template
  responses:
    Success:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Success'
    NotFound:
      description: The data wasn't found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotFound'
    DuplicateEntry:
      description: This data already exists
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DuplicateEntry'
    MissingParameter:
      description: Missing parameters in the body field
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MissingParameter'
    AuthenticationFail:
      description: Wrong parameters
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AuthenticationFail'

  schemas:
    # Schemas for responses template
    Success:
      description: OK
      type: object
        properties:
          success:
            type: boolean
            example: true
            required: true
    NotFound:
      description: The data wasn't found
      type: object
        properties:
          success:
            type: boolean
            example: false
            required: true
          message:
            type: string
            example: 'Nothing found.'
            required: true
    DuplicateEntry:
      description: Conflict
      type: object
        properties:
          success:
            type: boolean
            example: false
            required: true
          message:
            type: string
            example: 'Duplicate entry'
            required: true
    MissingParameter:
      description: Unprocessable Entity
      type: object
      properties:
        success:
          type: boolean
          example: false
          required: true
        message:
          type: string
          example: 'Missing parameters.'
          required: true
    AuthenticationFail:
      description: Unauthorized
      type: object
      properties:
        success:
          type: boolean
          example: false
          required: true
        message:
          type: string
          example: 'Authentication failed.'
          required: true

    # Schemas of the User style in the database
    User:
      type: object
      properties:
        id:
          type: integer
          format: int32
          description: The user ID.
          example: 42
        name:
          type: string
          description: The nickname of the user.
          example: Nao Marvin
        id_roles:
          type: integer
          format: int32
          description: The role's id of the user. Refer to the roles section to know more about.
          example: 2
        login:
          type: string
          format: email
          description: The user's email.
          example: nao.marvin@example.com
        password:
          type: string
          format: password
          description: The hashed user's password.
          example: 1m4g1n3_1m_H4sH3d_p4sSW0rD
        location:
          type: object
          description: The retailement shop locations of the user (only for professionnals)
          properties:
            latitude:
              type: number
              format: double
              description: The user's latitude location.
              example: 000.00000
            longitude:
              type: number
              format: double
              description: The user's longitude location.
              example: 000.00000
        verified:
          type: boolean
          description: "Indicative if the user has verified his account.\n
          Refer to the email confirmation section to know more about how to verify your account."
          example: true

    # The User login returns on POST /users/login
    UserLogin:
      allOf:
        - $ref: '#/components/schemas/User'
        - type: object
          properties:
            token:
              type: string
              description: "The **JsonWebToken**.\n
              This token will be the key of other protected routes.\n
              Refer to the JsonWebToken section to know more about."
              example: izdnaeomfjvbziv.token.trekzflf
            tokenExpires:
              type: integer
              format: int32
              description: The JsonWebToken expires every 24 hours.
              example: 8640

# The tags section regroup every tags and their description
tags:
  - name: Authentication
    description: "This section regroups every calls to authenticate yourself into the API.\n\n
    This section doesn't need a **JsonWebToken** and some routes of this section are used to retrieve a token."
  - name: Users
    description: "This section regroups every calls which begin with the */user/* in the path route.\n
    These routes are used to retrieve, modify or delete the information about an user.\n\n
    Some routes of this section doesn't need a **JsonWebToken** in the header, but the majority require one."

# Routes parameters template
parameters:
  x-access-token:
    name: x-access-token
    in: header
    description: The header parameter with the JsonWebToken
    required: false
    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc0FkbWluIjp0cnVlLCJ1c2VySWQiOjEsImlhdCI6MTU2NzcxNTAxMywiZXhwIjoxNTY3ODAxNDEzfQ.JmFArAc3tfoM1JGfyjUr3JaUyZnusmIvUTxLY7ROpuw"
    type: string
  Content-Type:
    name: Content-Type
    in: header
    description: The header parameter with then entry and response type
    required: true
    example: "application/json"
    type: string
