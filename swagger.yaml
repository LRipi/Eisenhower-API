openapi: 3.0.0
info:
  title: ApothiCare.io API
  description: "The official ApothiCare API's documentation."
  version: 1.4.0
servers:
  - url: https://api.apothicare.io
    description: "Official ApothiCare API server."
paths:
  # Users paths (/users)
  /users/login:
    post:
      summary: Login in.
      operationId: login
      parameters:
        - $ref: "#/parameters/Content-Type"
      tags:
        - Users
        - Authentication
      description: "This route allow to log in the API.\n
      The connection is made from an email address and a password.\n
      This route allows the recovery of a **JsonWebToken**, main element allowing to be able to request on all roads being protected.\n
      Once the token is retrieved, you will be able to transmit it in the header or body of your requests.\n\n

      Caution: You need yo verify your email address before to be able to connect on the API."
      requestBody:
        description: "The body parameters must contains the **login** and **password** field."
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                login:
                  type: string
                  description: The email address of the user
                  example: nao.marvin@example.com
                password:
                  type: string
                  description: The password of the user.
                  example: "42_is_the_answer"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserLogin'
        '422':
          $ref: '#/components/responses/MissingParameter'
        '401':
          $ref: '#/components/responses/AuthenticationFail'
  /users/create:
    post:
      summary: Create an account.
      operationId: register
      parameters:
        - $ref: "#/parameters/Content-Type"
      tags:
        - Users
        - Authentication
      description: "This route allow to create an account in the API.\n
        The account creation is made from an email address, a nickname and a password.\n
        After the account is created, an email is send to the specified email to verify the authenticity of this one.\n\n

        Caution: You won't be able to log into the API if you don't follow these steps."
      requestBody:
        description: "The body parameters must contains the **login**, the **name** and **password** field."
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                login:
                  type: string
                  description: The email address of the user
                  example: nao.marvin@example.com
                password:
                  type: string
                  description: The password of the user.
                  example: "42_is_the_answer"
                name:
                  type: string
                  description: The name / nickname of the user.
                  example: "Nao Marvin"
      responses:
        '201':
          $ref: '#/components/responses/Success'
        '422':
          $ref: '#/components/responses/MissingParameter'
        '409':
          $ref: '#/components/responses/DuplicateEntry'
  /users/forgotten:
    post:
      summary: Password recovering.
      operationId: passwordRecovering
      parameters:
        - $ref: "#/parameters/Content-Type"
      tags:
        - Users
        - Authentication
      description: "This route allow to recover a forgotten password.\n
          The password recovering just need the login of the user.\n
          An email is send to the specified login to verify the authenticity of this one."
      requestBody:
        description: "The body parameters must contains the **login**, the **name** and **password** field."
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                login:
                  type: string
                  description: The email address of the user
                  example: nao.marvin@example.com
      responses:
        '201':
          $ref: '#/components/responses/Success'
        '422':
          $ref: '#/components/responses/MissingParameter'
        '404':
          $ref: '#/components/responses/NotFound'
  /users/confirmEmail:
    post:
      summary: Route for email confirmation.
      operationId: confirmEmail
      parameters:
        - $ref: "#/parameters/Content-Type"
      tags:
        - Users
        - Authentication
      description: "This route allow to confirm your account on the ApothiCare API.\n
            The email confirmation must contain an user's id and an hashed password on the body field.\n
            These information are treated on the VueJs WebApplication to be understandable for the API."
      requestBody:
        description: "The body parameters must contains the **id_user** and **hashPassword** field."
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id_user:
                  type: integer
                  description: The user ID
                  example: 42
                hashPassword:
                  type: string
                  description: The hashed password of the user.
                  example: "1m4g1n3_1m_H4sH3d_p4sSW0rD"
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '422':
          $ref: '#/components/responses/MissingParameter'
        '404':
          $ref: '#/components/responses/NotFound'
          description: The link is wrong.
  /users:
    get:
      summary: Get the information of every users
      operationId: getUsers
      parameters:
        - $ref: "#/parameters/Content-Type"
        - $ref: "#/parameters/x-access-token"
      tags:
        - Users
      description: "This route allow to retrieve every users' information.\n
      This route can be called only by the admin of ApothiCare."
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Success'
                  - type: array
                    items:
                      $ref: '#/components/schemas/User'
    put:
      summary: Get the information of every users
      operationId: updateUsers
      parameters:
        - $ref: "#/parameters/Content-Type"
        - $ref: "#/parameters/x-access-token"
      tags:
        - Users
      description: "This route allow to modify the users' information.\n
      This route can only be called by the logged user."
      requestBody:
        description: "The body parameters must contains the **id_user** and **hashPassword** field."
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The new user's name.
                  example: New Marvin
                login:
                  type: string
                  description: The new user's login.
                  example: new_nao.marvin@example.com
                password:
                  type: string
                  description: The new user's password.
                  example: new_passw0rd
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '422':
          $ref: '#/components/responses/MissingParameter'
    delete:
      summary: Get the information of every users
      operationId: deleteUsers
      parameters:
        - $ref: "#/parameters/Content-Type"
        - $ref: "#/parameters/x-access-token"
      tags:
        - Users
      description: "This route allow to remove the user from the database.\n
      This route can only be called by the logged user."
      responses:
        '204':
          description: The user's account has been deleted.
  /users/me:
    get:
      summary: Get the information of every users
      operationId: getMyInformation
      parameters:
        - $ref: "#/parameters/Content-Type"
        - $ref: "#/parameters/x-access-token"
      tags:
        - Users
      description: "This route allow to retrieve the logged users' information."
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Success'
                  - $ref: '#/components/schemas/User'
  /users/password:
    patch:
      summary: Change the loggged user's password
      operationId: updatePassword
      parameters:
        - $ref: "#/parameters/Content-Type"
      tags:
        - Users
      description: This route allow the logged user to modify his password
      requestBody:
        description: "The body parameters must contains the **password** field."
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  description: The new user's password.
                  example: new_passw0rd
                userId:
                  type: integer
                  description: The user's id.
                  example: 42
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '422':
          $ref: '#/components/responses/MissingParameter'
  /users/nearestChemical:
    post:
      summary: Find the nearest chemical from a list
      operationId: findNearestChemical
      parameters:
        - $ref: "#/parameters/Content-Type"
        - $ref: "#/parameters/x-access-token"
      tags:
        - Users
      description: This route allow the user to see the nearest chemical which have the needed drug.
      requestBody:
        description: "The body parameters must contains the **latitude**, **longitude** and **pharmacien** fields."
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                longitude:
                  type: float
                  description: The longitude's coordinate of the current user.
                  example: 000.0000
                latitude:
                  type: float
                  description: The lagitude's coordinate of the current user.
                  example: 000.0000
                pharmacien:
                  type: array
                  description: An array of chemicals
                  items:
                    type: object
                    properties:
                      longitude:
                        type: float
                        description: The longitude's coordinate of a chemistry.
                        example: 000.0000
                      latitude:
                        type: float
                        description: The lagitude's coordinate of a chemistry.
                        example: 000.0000
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Success'
                  - $ref: '#/components/schemas/User'
        '422':
          $ref: '#/components/responses/MissingParameter'

  # Drugs path (/medicament)
  /medicament/{id}:
    get:
      summary: Get the information about a drug
      operationId: getMedicaments
      parameters:
        - $ref: "#/parameters/Content-Type"
        - $ref: "#/parameters/x-access-token"
        - in: path
          name: id
          required: false
          schema:
            type: integer
            minimum: 1
          description: The drug's id in the database.
        - in: query
          name: cip_code
          schema:
            type: integer
          description: The CIP 13 of the drug.
        - in: query
          name: cis_code
          schema:
            type: integer
          description: The CIS code of the drug.
        - in: query
          name: name
          schema:
            type: string
          description: The name of the drug.
        - in: query
          name: id_company
          schema:
            type: integer
          description: The company's id of the drug.
      tags:
        - Medicaments
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Success'
                  - type: array
                    items:
                      $ref: '#/components/schemas/Medicament'
        '404':
          $ref: '#/components/responses/NotFound'
  /medicament/notice/{id_notice}:
    get:
      summary: Get the notice of the needed drug.
      operationId: getNotice
      parameters:
        - $ref: "#/parameters/Content-Type"
        - $ref: "#/parameters/x-access-token"
        - in: path
          name: id_notice
          required: true
          schema:
            type: integer
            minimum: 1
          description: The notice's id in the database.
      tags:
        - Medicaments
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Success'
                  - $ref: '#/components/schemas/Notice'
  /medicament/pharmacien/{cip_code}:
    get:
      summary: Get the retailers of a specific drug.
      operationId: getRetailersByCip
      parameters:
        - $ref: "#/parameters/Content-Type"
        - $ref: "#/parameters/x-access-token"
        - in: path
          name: id_notice
          required: true
          schema:
            type: integer
            minimum: 1000000000000
          description: The notice's id in the database.
      tags:
        - Medicaments
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    description: The user's ID of the retailer.
                    example: 42
                  login:
                    type: string
                    description: The user's mail adress of the retailer.
                    example: nao.marvin@example.com
                  location:
                    type: object
                    properties:
                      longitude:
                        type: float
                        description: The longitude's coordinate of the chemistry.
                        example: 000.0000
                      latitude:
                        type: float
                        description: The lagitude's coordinate of the chemistry.
                        example: 000.0000
  /medicament:
    post:
      summary: Insert a drug in the database.
      operationId: addMedicament
      parameters:
        - $ref: "#/parameters/Content-Type"
        - $ref: "#/parameters/x-access-token"
      tags:
        - Medicaments
      requestBody:
        description: "The body parameters must contains the **name**, **notice**, **details**, **cip_code**, **id_company** and **cis_code** fields."
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The name of the new drug.
                  example: "My new drug, 100mg"
                notice:
                  type: string
                  description: The notice of the drug.
                  example: "My notice of my new drug, 100mg"
                details:
                  type: string
                  description: The information about the drug (the content of the drug).
                  example: "plaquette(s) PVC-Aluminium polyéthylène PVDC de 30 comprimé(s)"
                cip_code:
                  type: integer
                  format: int64
                  description: The CIP code of the drug.
                  example: 3400930071048
                id_company:
                  type: integer
                  format: int32
                  description: The company's id which has created the drug.
                  example: 42
                cis_code:
                  type: integer
                  format: int32
                  description: The CIS code of the drug.
                  example: 634319450
      responses:
        '201':
          $ref: '#/components/responses/Success'
        '422':
          $ref: '#/components/responses/MissingParameter'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/DuplicateEntry'

  # Company path (/company)
  /company:
    post:
      summary: Insert a drug company in the database.
      operationId: addCompany
      parameters:
        - $ref: "#/parameters/Content-Type"
        - $ref: "#/parameters/x-access-token"
      tags:
        - Company
      requestBody:
        description: "The body parameters must contains the **name** field."
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The name of the company.
                  example: new_company_test
      responses:
        '201':
          $ref: '#/components/responses/Success'
        '422':
          $ref: '#/components/responses/MissingParameter'
  /company/{id}:
    get:
      summary: Get companies.
      operationId: getCompany
      parameters:
        - $ref: "#/parameters/Content-Type"
        - $ref: "#/parameters/x-access-token"
        - in: path
          name: id
          required: false
          schema:
            type: integer
            minimum: 1
          description: The ID of the company to retrieve.
      tags:
        - Company
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Success'
                  - type: array
                    items:
                      $ref: '#/components/schemas/Company'
    put:
      summary: Update companies information.
      operationId: updateCompany
      parameters:
        - $ref: "#/parameters/Content-Type"
        - $ref: "#/parameters/x-access-token"
        - in: path
          name: id
          required: true
          schema:
            type: integer
            minimum: 1
          description: The ID of the company to update.
      requestBody:
        description: "The body parameters must contains the **name** field."
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The new name of the company.
                  example: new_company_test
      tags:
        - Company
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '422':
          $ref: '#/components/responses/MissingParameter'
    delete:
      summary: Delete a company.
      operationId: deleteCompany
      parameters:
        - $ref: "#/parameters/Content-Type"
        - $ref: "#/parameters/x-access-token"
        - in: path
          name: id
          required: true
          schema:
            type: integer
            minimum: 1
          description: The ID of the company to retrieve.
      tags:
        - Company
      responses:
        '204':
          description: The company has been deleted.

  # Inventory path (/inventory)
  /inventory:
    get:
      summary: Get the drugs of your inventory.
      operationId: getUsersInventory
      tags:
        - Inventory
      parameters:
        - $ref: "#/parameters/Content-Type"
        - $ref: "#/parameters/x-access-token"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Success'
                  - type: array
                    items:
                      $ref: '#/components/schemas/MyInventory'
    post:
      summary: Add a drug to your inventory.
      operationId: addMedicamentToInventory
      tags:
        - Inventory
      parameters:
        - $ref: "#/parameters/Content-Type"
        - $ref: "#/parameters/x-access-token"
      requestBody:
        description: "The body parameters must contains the **id_medicament** and **expiration** fields."
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id_medicament:
                  type: integer
                  format: int32
                  description: The drug's ID.
                  example: 1
                expiration:
                  type: string
                  format: date-time
                  description: The drug's expiration date.
                  example: 1
                batch_number:
                  type: string
                  description: The drug batch's number.
                  example: 15K02/B
      responses:
        '201':
          $ref: '#/components/responses/Success'
        '422':
          $ref: '#/components/responses/MissingParameter'
    delete:
      summary: Remove a drug from your inventory.
      operationId: deleteMedicamentFromInventory
      tags:
        - Inventory
      parameters:
        - $ref: "#/parameters/Content-Type"
        - $ref: "#/parameters/x-access-token"
        - in: query
          name: id_medicament
          required: false
          schema:
            type: array
            items:
              type: integer
              format: int32
              minimum: 1
          description: The ID of the drug to delete.
        - in: query
          name: lot
          required: false
          schema:
            type: array
            items:
              type: string
          description: The batch reference of the drug in the inventory.
      requestBody:
        description: "The body parameters must contains the **id_medicament** field."
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id_inventory:
                  type: array
                  items:
                    type: integer
                    format: int32
                    description: The drug's ID in the inventory.
                    example: 1
      responses:
        '204':
          description: "The drug has been removed from the user's inventory."
        '422':
          $ref: '#/components/responses/MissingParameter'
  /inventory/deadline:
    get:
      summary: Retrieve every expirated drugs.
      operationId: getMedicamentExpirated
      tags:
        - Inventory
      parameters:
        - $ref: "#/parameters/Content-Type"
        - $ref: "#/parameters/x-access-token"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Success'
                  - type: array
                    items:
                      $ref: '#/components/schemas/Inventory'
    delete:
      summary: Delete every expirated drugs.
      operationId: deleteMedicamentExpirated
      tags:
        - Inventory
      parameters:
        - $ref: "#/parameters/Content-Type"
        - $ref: "#/parameters/x-access-token"
      responses:
        '204':
          description: The drugs have been removed.

  # Treatments path (/treatment)
  /treatment:
    get:
      summary: Retrieve every user's treatment.
      operationId: getUsersTreatment
      tags:
        - Treatment
      parameters:
        - $ref: "#/parameters/Content-Type"
        - $ref: "#/parameters/x-access-token"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Success'
                  - type: array
                    items:
                      $ref: '#/components/schemas/Treatment'
    post:
      summary: Create a new treatment.
      operationId: addUsersTreatment
      tags:
        - Treatment
      parameters:
        - $ref: "#/parameters/Content-Type"
        - $ref: "#/parameters/x-access-token"
      requestBody:
        description: "The body parameters must contains the **date_end** and **cip_code** fields."
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                date_end:
                  type: string
                  format: date
                  description: The end date of the treatment.
                  example: 2019-06-14
                cip_code:
                  type: integer
                  format: int64
                  description: The CIP code of the drug.
                  example: 3400267532753
      responses:
        '201':
          $ref: '#/components/responses/Success'
        '422':
          $ref: '#/components/responses/MissingParameter'
    delete:
      summary: Remove a treatment.
      operationId: deleteUsersTreatment
      tags:
        - Treatment
      parameters:
        - $ref: "#/parameters/Content-Type"
        - $ref: "#/parameters/x-access-token"
      requestBody:
        description: "The body parameters must contains the **id_treatment** field."
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id_treatment:
                  type: array
                  items:
                    type: integer
                    format: int32
                    description: The treatment to remove.
                    example: 23
      responses:
        '204':
          description: The treatment has been removed.
        '422':
          $ref: '#/components/responses/MissingParameter'
  /treatment/missing/{id_treatment}:
    get:
      summary: Get the missing drug of a treatment.
      operationId: getMissingMedicament
      tags:
        - Treatment
      parameters:
        - $ref: "#/parameters/Content-Type"
        - $ref: "#/parameters/x-access-token"
        - in: path
          required: true
          name: id_treatment
          schema:
            type: integer
            minimum: 1
          description: The ID of the treatment to target.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Success'
                  - type: array
                    items:
                      $ref: '#/components/schemas/Medicament'
  /treatment/deadline:
    delete:
      summary: Get the missing drug of a treatment.
      operationId: deleteUsersTreatmentExpirated
      tags:
        - Treatment
      parameters:
        - $ref: "#/parameters/Content-Type"
        - $ref: "#/parameters/x-access-token"
      responses:
        '204':
          description: The expirated treatments haven been removed

  # Orders path (/order)
  /order:
    post:
      summary: Create a new order.
      operationId: getOrder
      tags:
        - Order
      parameters:
        - $ref: "#/parameters/Content-Type"
        - $ref: "#/parameters/x-access-token"
      requestBody:
        description: "The body parameters must contains the **id_pharmacien** and **id_medicament** fields."
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id_pharmacien:
                  type: integer
                  format: int32
                  description: The drug retailer's ID.
                  example: 42
                id_medicament:
                  type: integer
                  format: int32
                  description: The drug's ID needed.
                  example: 3400267532753
      responses:
        '201':
          $ref: '#/components/responses/Success'
        '422':
          $ref: '#/components/responses/MissingParameter'
  /order/{id_order}:
    get:
      summary: Get the order information.
      operationId: getOrderById
      tags:
        - Order
      parameters:
        - $ref: "#/parameters/Content-Type"
        - $ref: "#/parameters/x-access-token"
        - in: path
          name: id_order
          required: true
          schema:
            type: integer
            minimum: 1
          description: The ID of the order to remove.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Success'
                  - type: array
                    items:
                      $ref: '#/components/schemas/Order'
    delete:
      summary: Remove an order.
      operationId: deleteOrderById
      tags:
        - Order
      parameters:
        - $ref: "#/parameters/Content-Type"
        - $ref: "#/parameters/x-access-token"
        - in: path
          name: id_order
          required: true
          schema:
            type: integer
            minimum: 1
          description: The ID of the order to remove.
      responses:
        '204':
          description: The concerned order has been removed

# The components section contains schemas and routes' responses
components:
  # Routes responses template
  responses:
    Success:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Success'
    NotFound:
      description: The data wasn't found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotFound'
    DuplicateEntry:
      description: This data already exists
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DuplicateEntry'
    MissingParameter:
      description: Missing parameters in the body field
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MissingParameter'
    AuthenticationFail:
      description: Wrong parameters
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AuthenticationFail'

  schemas:
    # Schemas for responses template
    Success:
      description: OK
      type: object
        properties:
          success:
            type: boolean
            example: true
            required: true
    NotFound:
      description: The data wasn't found
      type: object
        properties:
          success:
            type: boolean
            example: false
            required: true
          message:
            type: string
            example: 'Nothing found.'
            required: true
    DuplicateEntry:
      description: Conflict
      type: object
        properties:
          success:
            type: boolean
            example: false
            required: true
          message:
            type: string
            example: 'Duplicate entry'
            required: true
    MissingParameter:
      description: Unprocessable Entity
      type: object
      properties:
        success:
          type: boolean
          example: false
          required: true
        message:
          type: string
          example: 'Missing parameters.'
          required: true
    AuthenticationFail:
      description: Unauthorized
      type: object
      properties:
        success:
          type: boolean
          example: false
          required: true
        message:
          type: string
          example: 'Authentication failed.'
          required: true

    # Schemas of the User style in the database
    User:
      type: object
      properties:
        id:
          type: integer
          format: int32
          description: The user ID.
          example: 42
        name:
          type: string
          description: The nickname of the user.
          example: Nao Marvin
        id_roles:
          type: integer
          format: int32
          description: The role's id of the user. Refer to the roles section to know more about.
          example: 2
        login:
          type: string
          format: email
          description: The user's email.
          example: nao.marvin@example.com
        password:
          type: string
          format: password
          description: The hashed user's password.
          example: 1m4g1n3_1m_H4sH3d_p4sSW0rD
        location:
          type: object
          description: The retailement shop locations of the user (only for professionnals)
          properties:
            latitude:
              type: number
              format: double
              description: The user's latitude location.
              example: 000.00000
            longitude:
              type: number
              format: double
              description: The user's longitude location.
              example: 000.00000
        verified:
          type: boolean
          description: "Indicative if the user has verified his account.\n
          Refer to the email confirmation section to know more about how to verify your account."
          example: true

    # The User login returns on POST /users/login
    UserLogin:
      allOf:
        - $ref: '#/components/schemas/User'
        - type: object
          properties:
            token:
              type: string
              description: "The **JsonWebToken**.\n
              This token will be the key of other protected routes.\n
              Refer to the JsonWebToken section to know more about."
              example: izdnaeomfjvbziv.token.trekzflf
            tokenExpires:
              type: integer
              format: int32
              description: The JsonWebToken expires every 24 hours.
              example: 86400

    # Schemas of the Medicament style in the database
    Medicament:
      type: object
      properties:
        id:
          type: integer
          format: int32
          description: The drug ID.
          example: 42
        name:
          type: string
          description: The name of the drug.
          example: ACARBOSE MYLAN 50 mg, comprimé
        id_notice:
          type: integer
          format: int32
          description: The notice's id of the drug. Refer to notice section to know more about.
          example: 6944
        id_company:
          type: integer
          format: int32
          description: The creator company's id of the drug. Refer to company section to know more about.
          example: 1234
        cip_code:
          type: integer
          format: int64
          description: The **CIP** code of the drug.
          example: 3400927611575
        details:
          type: string
          description: The details about the content of the drug.
          example: plaquette(s) PVC (ACLAR RX) polytrifluorochloroéthylène aluminium de 90 comprimé(s)
        cis_code:
          type: integer
          format: int32
          description: The **CIS** code of the drug.
          example: 60989978
        medication:
          type: boolean
          description: The boolean if the drug is under medication only.
          example: 0
        price:
          type: number
          format: float
          description: The price of the drug. The source came from (here)[http://base-donnees-publique.medicaments.gouv.fr/].
          example: 11,62
        repayment_rate:
          type: integer
          format: int32
          description: The repayment rate of the drug (in percent). The source came from (here)[http://base-donnees-publique.medicaments.gouv.fr/].
          example: 65

    # Schemas of the Notice
    Notice:
      type: object
      properties:
        id:
          type: integer
          format: int32
          description: The notice's ID.
          example: 42
        content:
          type: string
          description: The content of the notice.
          example: "This is an example of notice."
        name:
          type: string
          description: The name of the drug.
          example: DOLIPRANE 1000Mg

    # Schemas of the Companies
    Company:
      type: object
      properties:
        id:
          type: integer
          format: int32
          description: The company's ID.
          example: 1
        name:
          type: string
          description: The name of the company.
          example: PHARMA DEVELOPMENT

    # Schemas of the Inventories
    Inventory:
      type: object
      properties:
        id:
          type: integer
          format: int32
          description: The inventory product's ID.
          example: 17
        id_medicament:
          type: integer
          format: int32
          description: The drug's ID to add to the inventory.
          example: 1000
        id_user:
          type: integer
          format: int32
          description: The user's ID of the drug's inventory owner.
          example: 31
        expiration:
          type: string
          format: date-time
          description: The expiration date of the drug.
          example: "2022-04-20 00:00:00"

    MyInventory:
      allOf:
        - $ref: '#/components/schemas/Inventory'
        - type: object
          properties:
            id_medicament:
              type: integer
              format: int32
              description: The drug's id.
              example: 1
            name:
              type: string
              description: The name of the drug.
              example: BETADINE

    # Schema of the Treatments
    Treatment:
      type: object
      properties:
        id:
          type: integer
          format: int32
          description: The treatment's ID.
          example: 1
        id_user:
          type: integer
          format: int32
          description: The user's ID.
          example: 42
        date_begin:
          type: string
          format: date
          description: The beginning date of the treatment
          example: 2019-06-19
        date_end:
          type: string
          format: date
          description: The end date of the treatment
          example: 2019-07-19
        id_medicament:
          type: integer
          format: int32
          description: The medicament's ID.
          example: 330

    # Schema of the Orders
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int32
          description: The order's ID.
          example: 1
        id_customer:
          type: integer
          format: int32
          description: The curstomer's ID.
          example: 42
        id_seller:
          type: integer
          format: int32
          description: The retailer's ID.
          example: 84
        order_date:
          type: string
          format: date
          description: The date of the order when it was created.
          example: 2020-06-20
        available:
          type: boolean
          description: The availability of the command.
          example: false

# The tags section regroup every tags and their description
tags:
  - name: Authentication
    description: "This section regroups every calls to authenticate yourself into the API.\n\n
    This section doesn't need a **JsonWebToken** and some routes of this section are used to retrieve a token."
  - name: Users
    description: "This section regroups every calls which begin with the */user/* in the path route.\n
    These routes are used to retrieve, modify or delete the information about an user.\n\n
    Some routes of this section doesn't need a **JsonWebToken** in the header, but the majority require one."
  - name: Medicaments
    description: "This section regroups every calls which begin with the */medicament/* in the path route.\n
    These routes are used to retrieve the information of a drug or to add one in the database.\n\n
    Every routes need a **JsonWebToken** in the header."
  - name: Company
    description: "This section regroups every calls which begin with the */company/* in the path route.\n
    These routes are used to retrieve the information of company or to add one in the database.\n\n
    Every routes need a **JsonWebToken** in the header."
  - name: Inventory
    description: "This section regroups every calls which begin with the */inventory/* in the path route.\n
    These routes are used to retrieve the information about drugs (expiration date, drugs information...) contained in the user's inventory.\n\n
    Every routes need a **JsonWebToken** in the header."
  - name: Treatment
    description: "This section regroups every calls which begin with the */treatment/* in the path route.\n
    These routes are used to retrieve the information and to create new treatments reminders.\n\n
    Every routes need a **JsonWebToken** in the header."
  - name: Order
    description: "This section regroups every calls which begin with the */order/* in the path route.\n
    These routes are used to retrieve the information and to create new orders about one drug.\n\n
    Every routes need a **JsonWebToken** in the header."

# Routes parameters template
parameters:
  x-access-token:
    name: x-access-token
    in: header
    description: The header parameter with the JsonWebToken
    required: false
    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc0FkbWluIjp0cnVlLCJ1c2VySWQiOjEsImlhdCI6MTU2NzcxNTAxMywiZXhwIjoxNTY3ODAxNDEzfQ.JmFArAc3tfoM1JGfyjUr3JaUyZnusmIvUTxLY7ROpuw"
    type: string
  Content-Type:
    name: Content-Type
    in: header
    description: The header parameter with then entry and response type
    required: true
    example: "application/json"
    type: string
